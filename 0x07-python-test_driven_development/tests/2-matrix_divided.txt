import unittest
from 2-matrix_divided import matrix_divided

Class TestMatrixDivided(unittest.TestCase)
"""Testing the function matrix divided."""
   def matrix_divided(self)
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

``matrix_divided()`` expect that both arguments are either integer or float

>>> matrix is a list of lists of integers and div is a string
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "", line 1
        matrix= List of Lists of integers / div= string
        ^
    IndentationError: unexpected indent
   TypeError: div must be a number

``matrix_divided()`` expect that both arguments must not be equal to zero
  Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "", line 1
        matrix= List of Lists of int...

>>>  matrix= List of Lists of integers / div= 0 
ZeroDivisionError: division by zero

``matrix_divided()`` expect that both arguments must be the same size

>>>  matrix= list of lists of integers but not rectangular / div= integer 
TypeError: matrix must have each row with the same size

``matrix_divided()`` expect that div is a float 

>>>  matrix= list of lists of integers / div= float(inf)
All values in the resulting matrix should be 0.0
