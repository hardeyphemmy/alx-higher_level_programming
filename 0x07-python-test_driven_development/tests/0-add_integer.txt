import unittest
from 0-add_integer import add_integer

class TestAddInteger(unittest.TestCase):
"""Testing the function."""
   def test_add_integer(self):
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3
>>> add_integer(100, -2)
98
>>> add_integer(1, 5)
6
>>> add_integer(2)
100
>>> add_integer(100.3, -2)
98
>>> add_integer(4, "School")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
    if not (isinstance(b, int)):
TypeError: 'b' must be an integer
>>> add_integer(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 13, in add_integer
    raise TypeError("'a' must be an integer")
TypeError: 'a' must be an integer


if __name__ == "__main__":
    unittest.main()
