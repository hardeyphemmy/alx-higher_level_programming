
import unittest

matrix_mul = __import__('100-matrix_mul').matrix_mul

class TestMatrixMul(unittest.TestCase):
    """Test cases for the matrix_mul function."""

    def test_m_a_not_list(self):
        """Test case for when m_a is not a list."""
        m_a = 1
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a must be a list")

    def test_m_b_not_list(self):
        """Test case for when m_b is not a list."""
        m_a = [[1, 2], [3, 4]]
        m_b = 1
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_b must be a list")

    def test_m_a_not_list_of_lists(self):
        """Test case for when m_a is not a list of lists."""
        m_a = [1, 2, 3]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a must be a list of lists")

    def test_m_b_not_list_of_lists(self):
        """Test case for when m_b is not a list of lists."""
        m_a = [[1, 2], [3, 4]]
        m_b = [1, 2, 3]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_b must be a list of lists")

    def test_m_a_empty(self):
        """Test case for when m_a is empty."""
        m_a = []
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a can't be empty")

    def test_m_b_empty(self):
        """Test case for when m_b is empty."""
        m_a = [[1, 2], [3, 4]]
        m_b = []
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_b can't be empty")

    def test_m_a_invalid_elements(self):
        """Test case for when m_a contains invalid elements."""
        m_a = [[1, 2], [3, "4"]]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a should contain only integers or floats")

    def test_m_b_invalid_elements(self):
        """Test case for when m_b contains invalid elements."""
        m_a = [[1, 2], [3, 4]]
        m_b = [[1, 2], [3, "4"]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_b should contain only integers or floats")

    def test_m_a_not_rectangle(self):
        """Test case for when m_a is not a rectangle."""
        m_a = [[1, 2], [3, 4, 5]]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "each row of m_a must be of the same size")

    def test_m_b_not_rectangle(self):
        """Test case for when m_b is not a rectangle."""
        m_a = [[1, 2], [3, 4]]
        m_b = [[1, 2], [3, 4, 5]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "each row of m_b must be of the same size")

    def test_matrices_cant_be_multiplied(self):
        """Test case for when matrices can't be multiplied."""
        m_a = [[1, 2]]
        m_b = [[3, 4], [5, 6]]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a and m_b can't be multiplied")

    def test_valid_multiplication(self):
        """Test case for valid matrix multiplication."""
        m_a = [[1, 2], [3, 4]]
        m_b = [[5, 6], [7, 8]]
        result = matrix_mul(m_a, m_b)
        self.assertEqual(result, [[19, 22], [43, 50]])


if __name__ == '__main__':
    unittest.main()
