import unittest

class TestBaseGeomentry(unittest.TestCase):

    
    def test_instantiation(self):
	# Attempt to create an instance of BaseGeometry
	geometry = BaseGeometry

	# Check if the instance is crreated successfully
	self.assertIsInstance(geometry, Basegeometry)

    def test_area_not_implemented(self):
	# Create an instance of BaseGeometry
	geometry = BaseGeometry()
	
	# Call the area method and assert it raises an Exception
	with self.assertRaises(Exception) as context:
	    geometry.area()

	# Check if Exception has the correct message
	self.assertEqual(str(context.exception), "area() is not implemented")

    def test_integer_validator(self):
	# Create an instance of BaseGeometry
	geometry = BaseGeometry()

	# Test valid value
	geometry.integer_validator("test_int", 5)

	# Test invalid non-integer value
	with self.assertRaises(TypeError) as context:
	    geometry.integer_validator("test_int", "string")
	
	# Check if the raised TypeError has the correct message
	self.assertEqual(str(context.exception), "test_int must be an integer")

	# Test invalid negative integer value
	with self.assertRaises(ValueError) as context:
	   geometry.integer_validator("test_int", -5)
	
	# Check if the raised ValueError has the correct message
	self.assertEqual(str(context.exception), "test_int must be greater than 0")


if __name__ == "__main__":
    unittest.main()
